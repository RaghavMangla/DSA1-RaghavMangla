// Randomised Quick Sort==quickSort(apnacollege)+random function of arrays
import java.util.Random;

class RandomizedQsort{	
	// This Function helps in calculating
	// random numbers between low(inclusive)
	// and high(inclusive)
	static void random(int arr[],int low,int high){
		Random rand= new Random();
		int pivot = rand.nextInt(high-low+1)+low;
		int temp1=arr[pivot];
		arr[pivot]=arr[high];
		arr[high]=temp1;
	}
	/* This function takes last element as pivot,
	places the pivot element at its correct
	position in sorted array, and places all
	smaller (smaller than pivot) to left of
	pivot and all greater elements to right
	of pivot */
	static int partition(int arr[], int low, int high)
	{
		// pivot is chosen randomly
		random(arr,low,high);
		int pivot = arr[high];
	

		int i = (low-1); // index of smaller element
		for (int j = low; j < high; j++)
		{
			// If current element is smaller than or
			// equal to pivot
			if (arr[j] < pivot)
			{
				i++;

				// swap arr[i] and arr[j]
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
		int temp = arr[i+1];
		arr[i+1] = arr[high];
		arr[high] = temp;

		return i+1;
	}
	static void sort(int arr[], int low, int high){
		if (low < high){
			int pi = partition(arr, low, high);
			sort(arr, low, pi-1);
			sort(arr, pi+1, high);
		}
	}
